/**
 *  This code was generated by SwaggerHub from the following API:
 * 
 *  https://app.swaggerhub.com/api/KHANMAZHAR72/todo/1.0.0
 *  
 *  The content of this file will never be modified after initial
 *  generation--adding or changing parameters will not be reflected
 *  here.  You can regenerate this with the latest definition by
 *  deleting the lambda and allowing SwaggerHub to recreate it
 **/
const { DynamoDBClient,PutItemCommand,GetItemCommand } = require('@aws-sdk/client-dynamodb');
const { v4: uuidv4 } = require('uuid');
const REGION = `us-east-1`; // Put your correct aws region
const ddbClient = new DynamoDBClient({ region: REGION });

exports.handler = async function(event, context, callback) {
  // header: (required)  login-token to authorize user
  // var auth-token = event.auth-token;       //Auth needed to be handled
  // Complex Model: (required)  Create a new todo
  const body = event.body;
  console.log(event, "event here...")
  const name = body["name"];
  const currDateTime = new Date();
  const DateTimeFormat = currDateTime.toISOString();
  const stateId = uuidv4();
  const todoId = uuidv4();
  let isStateSet = false
  let createdTodo;
  
  let response={
    message: '',
    statusCode: null
  };
  if(!body){
    response.message = 'Invalid input provided.';
    return response;
  }
  if(body.name === ""){
    response.message = 'Invalid input provided.';
    return response;
  }
  const paramsState = {
    TableName: 'todoState',
    Item: {
      stateId: {S:`${stateId}`},
      state: {S:`pending`},
      stateChangeTime : {S:`${DateTimeFormat}`},
    },
   };
   const paramsTodo = {
    TableName: 'todoOrg',
    Item: {
      todoId: {S:`${todoId}`},
      name: {S:`${name}`},
      orgId: {S:"54321"},
      stateId : {S:`${stateId}`},
    },
   };
   try {
    const data = await ddbClient.send(new PutItemCommand(paramsState));
    console.log(data);
    if(data.$metadata && data.$metadata.httpStatusCode === 200){
      isStateSet = true
      if(isStateSet){
        try {
          const data = await ddbClient.send(new PutItemCommand(paramsTodo));
          console.log(data);
          if(data.$metadata && data.$metadata.httpStatusCode === 200){
            response.message = 'Successfully created todo';
            response.statusCode = 200;
            try {
              createdTodo = await ddbClient.send(new GetItemCommand({
                TableName: "todoOrg",
                Key: {
                  todoId: {S:`${todoId}`},
                }
              }));
            } catch (err) {
                console.log(err, "err");
                return err;
            }
          }
        } catch (err) {
          response = err
          console.error(err);
        }
      }
    }
    } catch (err) {
      response = err
      console.error(err);
    }
  
    if(response.statusCode === 200){
      return createdTodo.Item;
    }
    return response;
};