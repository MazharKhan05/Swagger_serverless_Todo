/**
 *  This code was generated by SwaggerHub from the following API:
 * 
 *  https://app.swaggerhub.com/api/KHANMAZHAR72/todo/1.0.0
 *  
 *  The content of this file will never be modified after initial
 *  generation--adding or changing parameters will not be reflected
 *  here.  You can regenerate this with the latest definition by
 *  deleting the lambda and allowing SwaggerHub to recreate it
 **/
const { DynamoDBClient,PutItemCommand,GetItemCommand } = require('@aws-sdk/client-dynamodb');
// const { v4: uuidv4 } = require('uuid');
const ULID = require('ulid')
const REGION = `us-east-1`; // Put your correct aws region
const ddbClient = new DynamoDBClient({ region: REGION });

exports.handler = async function(event, context, callback) {
  // header: (required)  login-token to authorize user
  const authToken = event.authToken;       //Auth needed to be handled
  const body = event.body;
  console.log(event, "event here...")
  const name = body["name"];
  const currDateTime = new Date();
  // const DateTimeFormat = currDateTime.toISOString();
  const todoId = ULID.ulid();
  let isStateSet = false
  const actionPerformerOrgId = 'OrgID#98765'
  const actionPerformerUserId = 'UserID#12345'
  
  let response={
    message: '',
    errType: '',
    statusCode: null,
    createdTodo: {}
  };
  if(!body){
    response.message = 'Invalid input provided.';
    return response;
  }
  if(body.name === ""){
    response.message = 'Invalid input provided.';
    return response;
  }
  if(!authToken || authToken === ""){
    response.message = 'Not a Authenticated user.';
    response.statusCode = 401;
    return response;
  }
   const paramsMaster = {
    TableName: 'TodosList',
    Item: {
      PK: {S: `${actionPerformerOrgId}:${actionPerformerUserId}`},
      SK: {S:`TodoId#${todoId}:TodoId#${todoId}`},
      Name: {S:`${name}`},
      State: {S:`pending`},
      time: {S:`${currDateTime}`}
    }
   };
   const paramsChild = {
    TableName: 'TodosList',
    Item: {
      PK: {S: `${actionPerformerOrgId}:${actionPerformerUserId}`},
      SK: {S:`TodoId#${todoId}:State#pending`},
      Name: {S:`${name}`},
      State: {S:`pending`},
      time: {S:`${currDateTime}`}
    }
   };
   const getTodoParams = {
      TableName: 'TodosList',
      Key: {
        PK: {S: `${actionPerformerOrgId}:${actionPerformerUserId}`},
        SK: {S:`TodoId#${todoId}:TodoId#${todoId}`}
      }
    };
   try {
      const data = await ddbClient.send(new PutItemCommand(paramsMaster));
      if(data.$metadata && data.$metadata.httpStatusCode === 200){
        response.message = 'Successfully created todo';
        response.statusCode = 200;
        try {
          const data = await ddbClient.send(new PutItemCommand(paramsChild));
          if(data.$metadata && data.$metadata.httpStatusCode === 200){
            response.statusCode = 200;
          }
        } catch (err) {
          response.message = err.errorMessage;
          response.errType = err.errorType;
          response.statusCode = 500;
          return response;
        }
      }
    } catch (err) {
      response.message = err.errorMessage;
      response.errType = err.errorType;
      response.statusCode = 500;
      return response;
    }
    
  
  try {
    const tododata = await ddbClient.send(new GetItemCommand(getTodoParams));
    console.log(tododata);
    if(tododata.Item.PK.S != `${actionPerformerOrgId}:${actionPerformerUserId}`){ //if not appropriate user dont allow him to delete
      response.message = 'Action Forbidden!!!';
      response.statusCode = 403;
      return response;
    }
    let keys = Object.keys(tododata.Item);
    for(let i=0;i<keys.length;i++){
      const val = tododata.Item[keys[i]].S;
      response.createdTodo[keys[i]] = val;
    }
    if(tododata.$metadata && tododata.$metadata.httpStatusCode === 200)isStateSet = true
    } catch (err) {
      response.message = err.errorMessage;
      response.errType = err.errorType;
      response.statusCode = 500;
      return response;
    }
  
    if(response.statusCode === 200 && isStateSet){
      return response;
    }
    return response;
};